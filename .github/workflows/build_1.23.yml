name: Build shadowsocks-rust ssserver on OpenBSD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build shadowsocks-rust ssserver
    steps:
      - name: Start OpenBSD VM
        id: openbsd-vm
        uses: vmactions/openbsd-vm@v1
        with:
          release: "7.6"
          arch: "amd64"
          usesh: true
          sync: nfs
          prepare: |
            export PKG_PATH=https://ftp.eu.openbsd.org/pub/OpenBSD/7.6/packages/amd64/
            pkg_add python gmake git curl cmake bash ggrep gdb libffi ccache ninja rust fish
            python3 --version  # Debug: Verify python3 version
            echo "permit nopass root" > /etc/doas.conf
            doas -C /etc/doas.conf && echo "doas configured successfully"
          envs: 'HOME PATH'

      - name: Install Rust 1.85.1
        shell: openbsd {0}
        run: |
          git clone https://github.com/semarie/build-rust.git
          cd build-rust
          ls -l  # Debug: List files to verify build.sh exists
          chmod +x build.sh  # Ensure script is executable
          echo "SUDO=doas" > ~/.build_rust.conf
          echo "distfiles_rustc_base=\"https://static.rust-lang.org/dist/rustc-1.85.1-src.tar.xz\"" >> ~/.build_rust.conf
          echo "rust_base_dir=/usr/local" >> ~/.build_rust.conf
          doas true  # Debug: Test doas
          python3 --version  # Debug: Confirm python3 version
          which python3  # Debug: Confirm python3 path
          export PYTHON=/usr/local/bin/python3  # Explicitly set PYTHON for build.sh
          ./build.sh init || { echo "Failed to run build.sh init"; exit 1; }
          # Debug: Verify tarball URL
          curl -I "https://static.rust-lang.org/dist/rustc-1.85.1-src.tar.xz" || echo "Warning: Tarball URL may be invalid"
          ./build.sh beta || { echo "Failed to run build.sh beta"; cat build_dir/build.log || echo "build.log not found"; exit 1; }
          echo "PATH=$HOME/build-rust/install_dir/beta/bin:$PATH" >> $GITHUB_ENV
        env:
          SUDO: doas

      - name: Verify Rust Installation
        shell: openbsd {0}
        run: |
          rustc --version
          cargo --version
        env:
          SUDO: doas

      - name: Clone shadowsocks-rust
        shell: openbsd {0}
        run: |
          git clone https://github.com/shadowsocks/shadowsocks-rust.git
          cd shadowsocks-rust
          git checkout v1.23.0
        env:
          SUDO: doas

      - name: Build ssserver with stream-cipher feature
        shell: openbsd {0}
        run: |
          cd shadowsocks-rust
          cargo build --release --bin ssserver --features stream-cipher
        env:
          SUDO: doas

      - name: Copy and strip ssserver to workspace
        shell: openbsd {0}
        run: |
          mkdir -p /tmp/artifacts
          cp /root/shadowsocks-rust/target/release/ssserver /tmp/artifacts/
          strip --strip-unneeded /tmp/artifacts/ssserver
          mkdir -p $GITHUB_WORKSPACE/artifacts
          cp /tmp/artifacts/ssserver $GITHUB_WORKSPACE/artifacts/
          ls -l $GITHUB_WORKSPACE/artifacts
        env:
          SUDO: doas

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shadowsocks-rust-ssserver
          path: ${{ github.workspace }}/artifacts/ssserver
